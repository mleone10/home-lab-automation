# Much of this implementation by Faranoosh: https://gitlab.com/itnoobs-automation/ansible
---
- name: enable community sources
  apt_repository:
    repo: deb http://download.proxmox.com/debian buster pve-no-subscription
    state: present

- name: disable enterprise sources
  apt_repository:
    repo: deb https://enterprise.proxmox.com/debian/pve stretch pve-enterprise
    state: absent

- name: update host
  apt:
    update_cache: true
    cache_valid_time: 3600
    upgrade: dist

- name: check if reboot is required
  stat:
    path: /var/run/reboot-required
  register: reboot

- name: reboot if required
  reboot:
  when: reboot.stat.exists

- name: get latest debian checksums
  get_url:
    url: https://cdimage.debian.org/cdimage/openstack/current/SHA256SUMS
    dest: /tmp

- name: find signature for target image
  shell: grep ".*{{ templateImage }}$" /tmp/SHA256SUMS | awk '{print $1}'
  changed_when: false
  register: checksum

- name: get latest debian 10 cloud image and verify against signature
  get_url:
    url: https://cdimage.debian.org/cdimage/openstack/current/{{ templateImage }}
    dest: /tmp/{{ templateImage }}
    checksum: "sha256:{{ checksum.stdout }}"
  register: baseImage

- name: copy public keys to host
  copy:
    src: "{{ item }}"
    dest: /tmp/{{ item | basename }}
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  with_items: "{{ lookup('fileglob', 'sshKey*', wantlist=true) }}"

- name: add ssh keys to authorized_keys file
  lineinfile:
    path: /{{ ansible_user }}/.ssh/authorized_keys
    state: present
    line: "{{ lookup('file', item) }}"
  with_items: "{{ lookup('fileglob', 'sshKey*', wantlist=true) }}"

- name: read ssh keys from key files
  shell: echo {{ lookup('file', item) }}
  register: "sshKeyOutput"
  with_fileglob: "{{ lookup('fileglob', 'sshKey*', wantlist=true) }}"
  changed_when: false

- name: create templates
  command:
    cmd: qm create {{ item.templateId }} --net0 virtio,bridge=vmbr0 -hotplug network,disk,cpu,memory --numa 1 --agent 1 --ostype l26 --template
    creates: /etc/pve/nodes/{{ pveHost }}/qemu-server/{{ item.templateId }}.conf
  with_items: "{{ templateDetails }}"
  register: vmCreation

- name: set template base image
  shell: |
    qm unlink {{ item.item.templateId }} --idlist virtio0 --force
    qm importdisk {{ item.item.templateId }} /tmp/{{ templateImage }} local-lvm
  with_items: "{{ vmCreation.results }}"
  when: baseImage.changed or item.changed

- name: configure template names
  command: qm set {{ item.templateId }} --name {{ item.templateName }}
  with_items: "{{ templateDetails }}"

- name: configure template hardware
  command: qm set {{ item.templateId }} --memory {{ item.memory }} --cores {{ item.cpuCores }}
  with_items: "{{ templateDetails }}"

- name: configure template storage
  command: qm set {{ item.templateId }} --scsihw virtio-scsi-pci --virtio0 local-lvm:vm-{{ item.templateId }}-disk-0
  with_items: "{{ templateDetails }}"

- name: configure template behavior
  command: qm set {{ item.templateId }} --boot c --bootdisk virtio0 --onboot 1 --serial0 socket
  with_items: "{{ templateDetails }}"

- name: configure template disk size
  command: qm resize {{ item.templateId }} virtio0 {{ item.diskSize }}
  with_items: "{{ templateDetails }}"

- name: copy user data script to host
  template:
    src: vmUserData.yml.j2
    dest: /var/lib/vz/snippets/vmUserData.yml
  vars:
    sshKeys: "{{ sshKeyOutput.results | map(attribute='stdout') | list }}"

- name: configure template cloud-init
  shell: |
    qm unlink {{ item.templateId }} --idlist ide2 --force
    qm set {{ item.templateId }} --ide2 local-lvm:cloudinit
    qm set {{ item.templateId }} --cicustom "user=local:snippets/vmUserData.yml"
  with_items: "{{ templateDetails }}"
