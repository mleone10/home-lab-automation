---
- name: update host
  apt:
    update_cache: true
    cache_valid_time: 3600
    upgrade: dist

- name: install required packages
  apt:
    name:
      - sudo
      - zip
      - unzip
    state: present

- name: allow passwordless sudo
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: "^%sudo"
    line: "%sudo ALL=(ALL) NOPASSWD: ALL"
    validate: "visudo -cf %s"

- name: set timezone
  timezone:
    name: America/New_York

- name: download AWS CLI installer
  unarchive:
    src: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
    dest: /tmp
    remote_src: yes
    creates: /tmp/aws
    mode: 0755

- name: install the AWS CLI
  command:
    cmd: /tmp/aws/install
    creates: /usr/local/bin/aws

- name: configure the AWS CLI
  shell: aws configure set {{ item.key }} {{ item.value }}
  no_log: true
  with_dict:
    aws_access_key_id: "{{ awsAccessKeyId }}"
    aws_secret_access_key: "{{ awsAccessKey }}"
    region: us-east-1
    format: json
  changed_when: false

- name: check if backup exists in S3
  command:
    cmd: aws s3 ls s3://{{ backupS3Bucket }}/{{ inventory_hostname }}.zip
  register: backupFound
  failed_when: false
  changed_when: false

- name: download backup from S3
  command:
    cmd: aws s3 cp s3://{{ backupS3Bucket }}/{{ inventory_hostname }}.zip /tmp/backup.zip
    creates: /tmp/backup.zip
  when: backupFound.rc == 0

- name: restore backup from S3
  unarchive:
    src: /tmp/backup.zip
    dest: /
    remote_src: yes
    creates: /backup
  when: backupFound.rc == 0

- name: create backup directory if it doesn't already exist
  file:
    path: /backup
    state: directory
    mode: 0755

- name: copy backup script to host
  template:
    src: backup.j2
    dest: /usr/local/sbin/backup
    owner: root
    group: root
    mode: 0744

- name: configure daily backup to S3
  cron:
    name: backup
    state: present
    minute: 0
    hour: 3
    job: backup

- name: configure backup on shutdown
  copy:
    src: backup.service
    dest: /etc/systemd/system/backup.service
    owner: root
    group: root

- name: reload systemd
  systemd:
    name: backup
    enabled: true
    state: started
    daemon_reload: true

- name: check if reboot is required
  stat:
    path: /var/run/reboot-required
  register: reboot

- name: reboot if required
  reboot:
  when: reboot.stat.exists
